{"id": "adeyosemanputra_pygoat_11_pygoat/introduction/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .models import  FAANG,info,login\n\ndef home(request):\n    \n    return render(request,'introduction/home.html')\ndef xss(request):\n    return render(request,\"Lab/XSS/xss.html\")\ndef xss_lab(request):\n    q=request.GET.get('q','');\n    f=FAANG.objects.filter(company=q)\n    if f:\n        args={\"company\":f[0].company,\"ceo\":f[0].info_set.all()[0].ceo,\"about\":f[0].info_set.all()[0].about}\n        return render(request,'Lab/XSS/xss_lab.html',args)\n    else:\n        return render(request,'Lab/XSS/xss_lab.html', {'query': q})\ndef sql(request):\n    return  render(request,'Lab/SQL/sql.html')\ndef sql_lab(request):\n\n    name=request.POST.get('name')\n\n    password=request.POST.get('pass')\n\n    if name:\n\n        if login.objects.filter(user=name):\n\n\n\n            val=login.objects.raw(\"SELECT * FROM introduction_login WHERE user='\"+name+\"'AND password='\"+password+\"'\")\n\n            if val:\n                user=val[0].user;\n                return render(request, 'Lab/SQL/sql_lab.html',{\"user1\":user})\n            else:\n                return render(request, 'Lab/SQL/sql_lab.html',{\"wrongpass\":password})\n        else:\n            return render(request, 'Lab/SQL/sql_lab.html',{\"no\": \"User not found\"})\n    else:\n        return render(request, 'Lab/SQL/sql_lab.html')\n\n", "reviews": [{"issue_text": "Possible SQL injection vector through string-based query construction.", "line_number": 32, "cwe": 89, "severity": "MEDIUM", "confidence": "LOW"}, {"issue_text": "Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name='Bob')`", "line_number": 32, "cwe": 89, "severity": "HIGH", "confidence": "LOW"}], "language": "python"}
{"id": "juice-shop_juice-shop_35_server.js", "code": "/*jslint node: true */\n'use strict';\n\nvar application_root = __dirname.replace(/\\\\/g, '/'),\n    fs = require('fs'),\n    glob = require('glob'),\n    morgan = require('morgan'),\n    Sequelize = require('sequelize'),\n    sequelize = new Sequelize('database', 'username', 'password', {\n        dialect: 'sqlite',\n        storage: 'data/juiceshop.sqlite'\n    }),\n    restful = require('sequelize-restful'),\n    express = require('express'),\n    errorhandler = require('errorhandler'),\n    cookieParser = require('cookie-parser'),\n    serveIndex = require('serve-index'),\n    favicon = require('serve-favicon'),\n    bodyParser = require('body-parser'),\n    PDFDocument = require('pdfkit'),\n    utils = require('./lib/utils'),\n    insecurity = require('./lib/insecurity'),\n    app = express();\n\nerrorhandler.title = 'Juice Shop (Express ' + utils.version('express') + ')';\n\n/* Delete old order PDFs */\nglob(__dirname + '/app/public/ftp/*.pdf', function (err, files) {\n    files.forEach(function(filename) {\n        fs.unlink(filename);\n    });\n});\n\n/* Domain Model */\nvar User = sequelize.define('User', {\n        email: Sequelize.STRING,\n        password: Sequelize.STRING\n    },\n    { hooks: {\n        beforeCreate: function (user, fn) {\n            hashPasswordHook(user);\n            xssChallengeUserHook(user);\n            fn(null, user);\n        },\n        beforeUpdate: function (user, fn) { // Pitfall: Will hash the hashed password again if password was not updated!\n            hashPasswordHook(user);\n            fn(null, user);\n        }\n    }}\n);\n\nfunction hashPasswordHook(user) {\n    user.password = insecurity.hash(user.password);\n}\n\nfunction xssChallengeUserHook(user) {\n    if (notSolved(persistedXssChallengeUser) && utils.contains(user.email, '<script>alert(\"XSS2\")</script>')) {\n        solve(persistedXssChallengeUser);\n    }\n}\n\nvar Product = sequelize.define('Product', {\n    name: Sequelize.STRING,\n    description: Sequelize.STRING,\n    price: Sequelize.DECIMAL,\n    image: Sequelize.STRING\n    },\n    { hooks: {\n        beforeCreate: function (product, fn) {\n            xssChallengeProductHook(product);\n            fn(null, product);\n        },\n        beforeUpdate: function (product, fn) {\n            xssChallengeProductHook(product);\n            fn(null, product);\n        }\n    }});\n\nfunction xssChallengeProductHook(product) {\n    if (notSolved(restfulXssChallenge) && utils.contains(product.description, '<script>alert(\"XSS4\")</script>')) {\n        solve(restfulXssChallenge);\n    }\n}\n\nvar Basket = sequelize.define('Basket', {\n});\n\nvar BasketItem = sequelize.define('BasketItems', {\n    id: {\n        type: Sequelize.INTEGER,\n        primaryKey: true,\n        autoIncrement: true\n    },\n    quantity: Sequelize.INTEGER\n});\n\nBasket.belongsTo(User);\nBasket.hasMany(Product, {through: BasketItem});\nProduct.hasMany(Basket, {through: BasketItem});\n\nvar Feedback = sequelize.define('Feedback', {\n    comment: Sequelize.STRING,\n    rating: Sequelize.INTEGER\n    },\n    { hooks: {\n        beforeCreate: function (feedback, fn) {\n            htmlSanitizationHook(feedback);\n            fn(null, feedback);\n        },\n        beforeUpdate: function (feedback, fn) {\n            htmlSanitizationHook(feedback);\n            fn(null, feedback);\n        }\n    }});\n\nFeedback.belongsTo(User);\n\nfunction htmlSanitizationHook(feedback) {\n    feedback.comment = insecurity.sanitizeHtml(feedback.comment);\n    if (notSolved(persistedXssChallengeFeedback) && utils.contains(feedback.comment, '<script>alert(\"XSS3\")</script>')) {\n        solve(persistedXssChallengeFeedback);\n    }\n}\n\nvar Challenge = sequelize.define('Challenges', {\n    description: Sequelize.STRING,\n    solved: Sequelize.BOOLEAN\n});\n\n/* Challenges */\nvar redirectChallenge, easterEggLevelOneChallenge, easterEggLevelTwoChallenge, directoryListingChallenge,\n    loginAdminChallenge, loginJimChallenge, loginBenderChallenge, changeProductChallenge, csrfChallenge,\n    errorHandlingChallenge, knownVulnerableComponentChallenge, negativeOrderChallenge, persistedXssChallengeFeedback,\n    persistedXssChallengeUser, localXssChallenge, restfulXssChallenge,basketChallenge, weakPasswordChallenge,\n    adminSectionChallenge, scoreBoardChallenge, feedbackChallenge, unionSqlInjectionChallenge, forgedFeedbackChallenge;\n\n/* Entities relevant for challenges */\n\nvar bender, osaft;\n\n/* Data */\nsequelize.drop();\nsequelize.sync().success(function () {\n    Challenge.create({\n        description: 'Find the carefully hidden \\'Score Board\\' page.',\n        solved: false\n    }).success(function(challenge) {\n        scoreBoardChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Provoke an error that is not very gracefully handled.',\n        solved: false\n    }).success(function(challenge) {\n        errorHandlingChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Log in with the administrator\\'s user account.',\n        solved: false\n    }).success(function(challenge) {\n        loginAdminChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Log in with Jim\\'s user account.',\n        solved: false\n    }).success(function(challenge) {\n        loginJimChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Log in with Bender\\'s user account.',\n        solved: false\n    }).success(function(challenge) {\n        loginBenderChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'XSS Tier 1: Perform a <i>reflected</i> XSS attack with &lt;script&gt;alert(\"XSS1\")&lt;/script&gt;.',\n        solved: false\n    }).success(function(challenge) {\n        localXssChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'XSS Tier 2: Perform a <i>persisted</i> XSS attack with &lt;script&gt;alert(\"XSS2\")&lt;/script&gt; bypassing a <i>client-side</i> security mechanism.',\n        solved: false\n    }).success(function(challenge) {\n        persistedXssChallengeUser = challenge;\n    });\n    Challenge.create({\n        description: 'XSS Tier 3: Perform a <i>persisted</i> XSS attack with &lt;script&gt;alert(\"XSS3\")&lt;/script&gt; bypassing a <i>server-side</i> security mechanism.',\n        solved: false\n    }).success(function(challenge) {\n        persistedXssChallengeFeedback = challenge;\n    });\n    Challenge.create({\n        description: 'XSS Tier 4: Perform a <i>persisted</i> XSS attack with &lt;script&gt;alert(\"XSS4\")&lt;/script&gt; without using the frontend application at all.',\n        solved: false\n    }).success(function(challenge) {\n        restfulXssChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Retrieve a list of all user credentials via SQL Injection',\n        solved: false\n    }).success(function(challenge) {\n        unionSqlInjectionChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Log in with the administrator\\'s user credentials without previously changing them or applying SQL Injection.',\n        solved: false\n    }).success(function(challenge) {\n        weakPasswordChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Get rid of all 5-star customer feedback.',\n        solved: false\n    }).success(function(challenge) {\n        feedbackChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Post some feedback in another users name.',\n        solved: false\n    }).success(function(challenge) {\n        forgedFeedbackChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Wherever you go, there you are.',\n        solved: false\n    }).success(function(challenge) {\n        redirectChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Access someone else\\'s basket.',\n        solved: false\n    }).success(function(challenge) {\n        basketChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Place an order that makes you rich.',\n        solved: false\n    }).success(function(challenge) {\n        negativeOrderChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Access a confidential document.',\n        solved: false\n    }).success(function(challenge) {\n        directoryListingChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Access the administration section of the store.',\n        solved: false\n    }).success(function(challenge) {\n        adminSectionChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Change Bender\\'s password into <i>slurmCl4ssic</i>.' ,\n        solved: false\n    }).success(function(challenge) {\n        csrfChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Change the link in the description of the <a href=\"/#/search?q=O-Saft\">O-Saft product</a> to <i>http://kimminich.de</i>.',\n        solved: false\n    }).success(function(challenge) {\n        changeProductChallenge = challenge;\n    });\n    Challenge.create({\n        description: '<a href=\"/#/contact\">Inform the shop</a> about a vulnerable library it is using. (Mention the exact library name and version in your complaint.)',\n        solved: false\n    }).success(function(challenge) {\n        knownVulnerableComponentChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Find the hidden <a href=\"http://en.wikipedia.org/wiki/Easter_egg_(media)\" target=\"_blank\">easter egg</a>.',\n        solved: false\n    }).success(function(challenge) {\n        easterEggLevelOneChallenge = challenge;\n    });\n    Challenge.create({\n        description: 'Apply some advanced cryptanalysis to find <i>the real</i> easter egg.',\n        solved: false\n    }).success(function(challenge) {\n        easterEggLevelTwoChallenge = challenge;\n    });\n    User.create({\n        email: 'admin@juice-sh.op',\n        password: 'admin123'\n    });\n    User.create({\n        email: 'jim@juice-sh.op',\n        password: 'ncc-1701'\n    });\n    User.create({\n        email: 'bender@juice-sh.op',\n        password: 'booze'\n    }).success(function(user) {\n        bender = user;\n    });\n    Product.create({\n        name: 'Apple Juice (1000ml)',\n        description: 'The all-time classic.',\n        price: 1.99,\n        image: 'apple_juice.jpg'\n    });\n    Product.create({\n        name: 'Orange Juice (1000ml)',\n        description: 'Made from oranges hand-picked by Uncle Dittmeyer.',\n        price: 2.99,\n        image: 'orange_juice.jpg'\n    });\n    Product.create({\n        name: 'Eggfruit Juice (500ml)',\n        description: 'Now with even more exotic flavour.',\n        price: 8.99,\n        image: 'eggfruit_juice.jpg'\n    });\n    Product.create({\n        name: 'Raspberry Juice (1000ml)',\n        description: 'Made from blended Raspberry Pi, water and sugar.',\n        price: 4.99,\n        image: 'raspberry_juice.jpg'\n    });\n    Product.create({\n        name: 'Lemon Juice (500ml)',\n        description: 'Sour but full of vitamins.',\n        price: 2.99,\n        image: 'lemon_juice.jpg'\n    });\n    Product.create({\n        name: 'Banana Juice (1000ml)',\n        description: 'Monkeys love it the most.',\n        price: 1.99,\n        image: 'banana_juice.jpg'\n    });\n    Product.create({\n        name: 'Lemon Juice (500ml)',\n        description: 'Sour but full of vitamins.',\n        price: 2.99,\n        image: 'lemon_juice.jpg'\n    });\n    Product.create({\n        name: 'Juice Shop T-Shirt (3XL)',\n        description: 'Real fans wear it 24/7!',\n        price: 24.99,\n        image: 'fan_shirt.jpg'\n    });\n    Product.create({\n        name: 'OWASP SSL Advanced Forensic Tool (O-Saft)',\n        description: 'O-Saft is an easy to use tool to show information about SSL certificate and tests the SSL connection according given list of ciphers and various SSL configurations. <a href=\"https://www.owasp.org/index.php/O-Saft\" target=\"_blank\">More...</a>',\n        price: 0.01,\n        image: 'owasp_osaft.jpg'\n    }).success(function(product) {\n        osaft = product;\n    });\n    Basket.create({\n        UserId: 1\n    });\n    Basket.create({\n        UserId: 2\n    });\n    Basket.create({\n        UserId: 3\n    });\n    BasketItem.create({\n        BasketId: 1,\n        ProductId: 1,\n        quantity: 2\n    });\n    BasketItem.create({\n        BasketId: 1,\n        ProductId: 2,\n        quantity: 3\n    });\n    BasketItem.create({\n        BasketId: 1,\n        ProductId: 3,\n        quantity: 1\n    });\n    BasketItem.create({\n        BasketId: 2,\n        ProductId: 4,\n        quantity: 2\n    });\n    BasketItem.create({\n        BasketId: 3,\n        ProductId: 5,\n        quantity: 1\n    });\n    Feedback.create({\n        UserId: 1,\n        comment: 'I love this shop! Best juice in town! Highly recommended!',\n        rating: 5\n    });\n    Feedback.create({\n        UserId: 2,\n        comment: 'Great shop! The O-Saft is highly recommended!',\n        rating: 4\n    });\n    Feedback.create({\n        comment: 'Why isn\\'t there a T-Shirt for skinny people available?!',\n        rating: 2\n    });\n    Feedback.create({\n        comment: 'This is <b>the</b> store for juices of all kinds!',\n        rating: 4\n    });\n    Feedback.create({\n        comment: 'Never gonna buy my juice anywhere else from now on! Thanks for the great service!',\n        rating: 4\n    });\n    Feedback.create({\n        comment: 'Keep up the good work!',\n        rating: 3\n    });\n    Feedback.create({\n        UserId: 3,\n        comment: 'No real drinks available here!',\n        rating: 1\n    });\n});\n\n/* Favicon */\napp.use(favicon(__dirname + '/app/public/favicon.ico'));\n\n/* Checks for solved challenges */\napp.use(verifyDatabaseRelatedChallenges());\napp.use('/public/images/tracking', verifyAccessControlChallenges());\n\n/* public/ftp directory browsing and file download */\napp.use('/public/ftp', serveIndex('app/public/ftp', {'icons': true}));\napp.use('/public/ftp/:file', serveFiles());\n\napp.use(express.static(application_root + '/app'));\napp.use(morgan('dev'));\napp.use(cookieParser('kekse'));\napp.use(bodyParser.json());\n\n/* Authorization */\n/* Baskets: Unauthorized users are not allowed to access baskets */\napp.use('/rest/basket', insecurity.isAuthorized());\n/* BasketItems: API only accessible for authenticated users */\napp.use('/api/BasketItems', insecurity.isAuthorized());\napp.use('/api/BasketItems/:id', insecurity.isAuthorized());\n/* Feedbacks: GET allowed for feedback carousel, POST allowed in order to provide feedback without being logged in */\napp.use('/api/Feedbacks/:id', insecurity.isAuthorized());\n/* Users: Only POST is allowed in order to register a new uer */\napp.get('/api/Users', insecurity.isAuthorized());\napp.get('/api/Users/:id', insecurity.isAuthorized());\napp.put('/api/Users/:id', insecurity.isAuthorized());\napp.delete('/api/Users/:id', insecurity.denyAll()); // Deleting users is forbidden entirely to keep login challenges solvable\n/* Products: Only GET is allowed in order to view products */\napp.post('/api/Products', insecurity.isAuthorized());\n//app.put('/api/Products/:id', insecurity.isAuthorized()); // = missing function-level access control vulnerability\napp.delete('/api/Products/:id', insecurity.denyAll()); // Deleting products is forbidden entirely to keep the O-Saft url-change challenge solvable\n/* Challenges: GET list of challenges allowed. Everything else forbidden independent of authorization (hence the random secret) */\napp.post('/api/Challenges', insecurity.denyAll());\napp.use('/api/Challenges/:id', insecurity.denyAll());\n/* REST API */\napp.use('/rest/user/authentication-details', insecurity.isAuthorized());\napp.use('/rest/basket/:id', insecurity.isAuthorized());\napp.use('/rest/basket/:id/order', insecurity.isAuthorized());\n\n/* Challenge evaluation before sequelize-restful takes over */\napp.post('/api/Feedbacks', verifyForgedFeedbackChallenge());\n\n/* Sequelize Restful APIs */\napp.use(restful(sequelize, { endpoint: '/api', allowed: ['Users', 'Products', 'Feedbacks', 'BasketItems', 'Challenges'] }));\n/* Custom Restful API */\napp.post('/rest/user/login', loginUser());\napp.get('/rest/user/change-password', changePassword());\napp.get('/rest/user/authentication-details', retrieveUserList());\napp.get('/rest/user/whoami', retrieveLoggedInUsersId());\napp.get('/rest/product/search', searchProducts());\napp.get('/rest/basket/:id', retrieveBasket());\napp.post('/rest/basket/:id/order', createOrderPdf());\napp.get('/rest/admin/application-version', retrieveAppVersion());\napp.get('/redirect', performRedirect());\n/* File Serving */\napp.get('/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg', serveEasterEgg());\napp.use(serveAngularClient());\n/* Error Handling */\napp.use(verifyErrorHandlingChallenge());\napp.use(errorhandler());\n\nexports.start = function (config, readyCallback) {\n    if (!this.server) {\n        this.server = app.listen(config.port, function () {\n            console.log('Listening on port %d', config.port);\n            // callback to call when the server is ready\n            if (readyCallback) {\n                readyCallback();\n            }\n        });\n    }\n};\n\nexports.close = function (exitCode) {\n    this.server.close();\n    if (exitCode && exitCode !== 0) {\n        process.exit(exitCode);\n    }\n};\n\nfunction verifyForgedFeedbackChallenge() {\n    return function(req, res, next) {\n        if (notSolved(forgedFeedbackChallenge)) {\n            var user = insecurity.authenticatedUsers.from(req);\n            var userId = user ? user.data.id : undefined;\n            if (req.body.UserId && req.body.UserId != userId) {\n                solve(forgedFeedbackChallenge);\n            }\n        }\n        next();\n    }\n}\n\nfunction verifyAccessControlChallenges() {\n    return function (req, res, next) {\n        if (notSolved(scoreBoardChallenge) && utils.endsWith(req.url, '/scoreboard.png')) {\n            solve(scoreBoardChallenge);\n        } else if (notSolved(adminSectionChallenge) && utils.endsWith(req.url, '/administration.png')) {\n            solve(adminSectionChallenge);\n        }\n        next();\n    };\n}\n\nfunction retrieveLoggedInUsersId() {\n    return function (req, res) {\n        var user = insecurity.authenticatedUsers.from(req);\n        res.json({id: (user ? user.data.id : undefined), email: (user ? user.data.email : undefined)});\n    };\n}\n\nfunction retrieveAppVersion() {\n    return function (req, res) {\n        res.json({version: utils.version()});\n    };\n}\n\nfunction serveAngularClient() {\n    return function (req, res, next) {\n        if (!utils.startsWith(req.url, '/api') && !utils.startsWith(req.url, '/rest')) {\n            res.sendFile(__dirname + '/app/index.html');\n        } else {\n            next(new Error('Unexpected path: ' + req.url));\n        }\n    };\n}\n\nfunction verifyErrorHandlingChallenge() {\n    return function (err, req, res, next) {\n        if (notSolved(errorHandlingChallenge) && err && res.statusCode > 401) {\n            solve(errorHandlingChallenge);\n        }\n        next(err);\n    };\n}\n\nfunction serveEasterEgg() {\n    return function (req, res) {\n        if (notSolved(easterEggLevelTwoChallenge)) {\n            solve(easterEggLevelTwoChallenge);\n        }\n        res.sendFile(__dirname + '/app/private/threejs-demo.html');\n    };\n}\n\nfunction performRedirect() {\n    return function(req, res) {\n        var to = req.query.to;\n        var githubUrl = 'https://github.com/bkimminich/juice-shop';\n        if (to.indexOf(githubUrl) > -1) {\n            if (notSolved(redirectChallenge) && to !== githubUrl) { // TODO Instead match against something like <anotherUrl>[?&]=githubUrl\n                solve(redirectChallenge);\n            }\n            res.redirect(to);\n        } else {\n            res.redirect(githubUrl);\n        }\n    };\n}\n\nfunction retrieveBasket() {\n    return function(req, res, next){\n        var id = req.params.id;\n        Basket.find({where: {id: id}, include: [ Product ]})\n            .success(function(basket) {\n                if (notSolved(basketChallenge)) {\n                    var user = insecurity.authenticatedUsers.from(req);\n                    if (user && user.bid != id) {\n                        solve(basketChallenge);\n                    }\n                }\n                res.json(utils.queryResultToJson(basket));\n            }).error(function (error) {\n                next(error);\n            });\n    };\n}\n\nfunction retrieveUserList() {\n    return function(req, res, next){\n        User.findAll().success(function(users) {\n                var usersWithLoginStatus = utils.queryResultToJson(users);\n                usersWithLoginStatus.data.forEach(function(user) {\n                    user.token = insecurity.authenticatedUsers.tokenOf(user);\n                });\n                res.json(usersWithLoginStatus);\n            }).error(function (error) {\n                next(error);\n            });\n    };\n}\n\nfunction createOrderPdf() {\n    return function(req, res, next){\n        var id = req.params.id;\n        Basket.find({where: {id: id}, include: [ Product ]})\n            .success(function(basket) {\n                if (basket) {\n                    var customer = insecurity.authenticatedUsers.from(req);\n                    var orderNo = insecurity.hash(new Date()+'_'+id);\n                    var pdfFile = 'order_' + orderNo + '.pdf';\n                    var doc = new PDFDocument();\n                    var fileWriter = doc.pipe(fs.createWriteStream(__dirname + '/app/public/ftp/' + pdfFile));\n\n                    doc.text('Juice-Shop - Order Confirmation');\n                    doc.moveDown();\n                    doc.moveDown();\n                    doc.moveDown();\n                    doc.text('Customer: ' + (customer ? customer.data ? customer.data.email : undefined : undefined));\n                    doc.moveDown();\n                    doc.text('Order #: ' + orderNo);\n                    doc.moveDown();\n                    doc.moveDown();\n                    var totalPrice = 0;\n                    basket.products.forEach(function(product) {\n                        var itemTotal = product.price*product.basketItem.quantity;\n                        doc.text(product.basketItem.quantity + 'x ' + product.name + ' ea. ' + product.price + ' = ' + itemTotal);\n                        doc.moveDown();\n                        totalPrice += itemTotal;\n                    });\n                    doc.moveDown();\n                    doc.text('Total Price: ' + totalPrice);\n                    doc.moveDown();\n                    doc.moveDown();\n                    doc.text('Thank you for your order!');\n                    doc.end();\n\n                    if (notSolved(negativeOrderChallenge) && totalPrice < 0) {\n                        solve (negativeOrderChallenge);\n                    }\n\n                    fileWriter.on('finish', function() {\n                        BasketItem.destroy({BasketId: id});\n                        res.send('/public/ftp/' + pdfFile);\n                    });\n                } else {\n                    next(new Error('Basket with id=' + id + ' does not exist.'));\n                }\n            }).error(function (error) {\n                next(error);\n            });\n    };\n}\n\nfunction searchProducts() {\n    return function(req, res, next){\n        var criteria = req.query.q === 'undefined' ? '' : req.query.q || '';\n        if (notSolved(localXssChallenge) && utils.contains(criteria, '<script>alert(\"XSS1\")</script>')) {\n            solve(localXssChallenge);\n        }\n        sequelize.query('SELECT * FROM Products WHERE (name LIKE \\'%' + criteria + '%\\') OR (description LIKE \\'%' + criteria + '%\\')')\n            .success(function(products) {\n                if (notSolved(unionSqlInjectionChallenge)) {\n                    var dataString = JSON.stringify(products);\n                    var solved = true;\n                    User.findAll().success(function(data) {\n                        var users = utils.queryResultToJson(data);\n                        if (users.data && users.data.length) {\n                            for (var i=0; i<users.data.length; i++) {\n                                solved = solved && utils.contains(dataString, users.data[i].email) && utils.contains(dataString, users.data[i].password);\n                                if (!solved) {\n                                    break;\n                                }\n                            }\n                            if (solved) {\n                                solve(unionSqlInjectionChallenge);\n                            }\n                        }\n                    });\n                }\n                res.json(utils.queryResultToJson(products));\n            }).error(function (error) {\n                next(error);\n            });\n    };\n}\n\nfunction changePassword() {\n    return function(req, res, next){\n        var password = req.query.new;\n        var repeatPassword = req.query.repeat;\n        if (!password || password === 'undefined') {\n            res.status(401).send('Password cannot be empty.');\n        } else if (password !== repeatPassword) {\n            res.status(401).send('New and repeated password do not match.');\n        } else {\n            var loggedInUser = insecurity.authenticatedUsers.get(req.cookies.token);\n            if (loggedInUser) {\n                User.find(loggedInUser.data.id).success(function(user) {\n                    user.updateAttributes({password: password}).success(function(user) {\n                        res.send(user);\n                    }).error(function(error) {\n                        next(error);\n                    });\n                }).error(function(error) {\n                    next(error);\n                });\n            } else {\n                next(new Error('Blocked illegal activity by ' + req.connection.remoteAddress));\n            }\n        }\n    };\n}\n\nfunction loginUser() {\n    return function(req, res, next){\n        if (notSolved(weakPasswordChallenge) && req.body.email === 'admin@juice-sh.op' && req.body.password === 'admin123') {\n            solve(weakPasswordChallenge);\n        }\n        sequelize.query('SELECT * FROM Users WHERE email = \\'' + (req.body.email || '') + '\\' AND password = \\'' + insecurity.hash(req.body.password || '') + '\\'', User, {plain: true})\n            .success(function(authenticatedUser) {\n                var user = utils.queryResultToJson(authenticatedUser);\n                if (user.data && user.data.id) {\n                    if (notSolved(loginAdminChallenge) && user.data.id === 1) {\n                        solve(loginAdminChallenge);\n                    } else if (notSolved(loginJimChallenge) && user.data.id === 2) {\n                        solve(loginJimChallenge);\n                    } else if  (notSolved(loginBenderChallenge) && user.data.id === 3) {\n                        solve(loginBenderChallenge);\n                    }\n                    Basket.findOrCreate({UserId: user.data.id}).success(function(basket) {\n                        var token = insecurity.authorize(user);\n                        user.bid = basket.id; // keep track of original basket for challenge solution check\n                        insecurity.authenticatedUsers.put(token, user);\n                        res.json({ token: token, bid: basket.id });\n                    }).error(function (error) {\n                        next(error);\n                    });\n                } else {\n                    res.status(401).send('Invalid email or password.');\n                }\n            }).error(function (error) {\n                next(error);\n            });\n    };\n}\n\nfunction serveFiles() {\n    return function(req, res, next) {\n        var file = req.params.file;\n        if (file && (utils.endsWith(file, '.md') || (utils.endsWith(file, '.pdf')))) {\n            file = insecurity.cutOffPoisonNullByte(file);\n            if (notSolved(easterEggLevelOneChallenge) && file.toLowerCase() === 'eastere.gg') {\n                solve(easterEggLevelOneChallenge);\n            } else if (notSolved(directoryListingChallenge) && file.toLowerCase() === 'acquisitions.md') {\n                solve(directoryListingChallenge);\n            }\n            res.sendFile(__dirname + '/app/public/ftp/' + file);\n        } else {\n            res.status(403);\n            next(new Error('Only .md and .pdf files are allowed!'));\n        }\n    };\n}\n\nfunction verifyDatabaseRelatedChallenges() {\n    return function (req, res, next) {\n        if (notSolved(changeProductChallenge) && osaft) {\n            osaft.reload().success(function () {\n                if (!utils.contains(osaft.description, '<a href=\"https://www.owasp.org/index.php/O-Saft\" target=\"_blank\">')) {\n                    if (utils.contains(osaft.description, '<a href=\"http://kimminich.de\" target=\"_blank\">')) {\n                        solve(changeProductChallenge);\n                    }\n                }\n            });\n        }\n        if (notSolved(csrfChallenge) && bender) {\n            bender.reload().success(function() {\n                if (bender.password === insecurity.hash('slurmCl4ssic')) {\n                    solve(csrfChallenge);\n                }\n            });\n        }\n        if (notSolved(feedbackChallenge)) {\n            Feedback.findAndCountAll({where: {rating: 5}}).success(function (feedbacks) {\n                if (feedbacks.count === 0) {\n                    solve(feedbackChallenge);\n                }\n            });\n        }\n        if (notSolved(knownVulnerableComponentChallenge)) {\n            Feedback.findAndCountAll({where: Sequelize.or(\n                Sequelize.and(['comment LIKE \\'%sanitize-html%\\''], ['comment LIKE \\'%1.4.2%\\'']),\n                Sequelize.and(['comment LIKE \\'%htmlparser2%\\''], ['comment LIKE \\'%3.3.0%\\'']) ) }\n            ).success(function (data) {\n                if (data.count > 0) {\n                    solve(knownVulnerableComponentChallenge);\n                }\n            });\n        }\n        next();\n    };\n}\n\nfunction solve(challenge) {\n    challenge.solved = true;\n    challenge.save().success(function() {\n        console.log('Solved challenge \"' + challenge.description + '\"');\n    });\n}\n\nfunction notSolved(challenge) {\n    return challenge && !challenge.solved;\n}", "reviews": [{"issue_text": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.", "line_number": 427, "cwe": 548, "severity": "MEDIUM", "confidence": "MEDIUM"}, {"issue_text": "It looks like 'to' is read from user input and it is used to as a redirect. Ensure 'to' is not externally controlled, otherwise this is an open redirect.", "line_number": 574, "cwe": 601, "severity": "LOW", "confidence": "LOW"}, {"issue_text": "The application redirects to a URL specified by user-supplied input `req` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.", "line_number": 574, "cwe": 601, "severity": "MEDIUM", "confidence": "HIGH"}, {"issue_text": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.", "line_number": 654, "cwe": 79, "severity": "MEDIUM", "confidence": "MEDIUM"}, {"issue_text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "line_number": 671, "cwe": 89, "severity": "HIGH", "confidence": "HIGH"}, {"issue_text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "line_number": 671, "cwe": 89, "severity": "MEDIUM", "confidence": "MEDIUM"}, {"issue_text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "line_number": 730, "cwe": 89, "severity": "HIGH", "confidence": "HIGH"}, {"issue_text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "line_number": 730, "cwe": 89, "severity": "MEDIUM", "confidence": "MEDIUM"}, {"issue_text": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.", "line_number": 768, "cwe": 73, "severity": "MEDIUM", "confidence": "MEDIUM"}], "language": "javascript"}
