{"id": "adeyosemanputra_pygoat_1", "reviews": [{"filename": "pygoat/pygoat/settings.py", "language": "python", "reviews": [{"issue_text": "Possible hardcoded password: 'lr66%-a!$km5ed@n5ug!tya5bv!0(yqwa1tn!q%0%3m2nh%oml'", "line_number": 23, "cwe": 259, "severity": "LOW", "confidence": "MEDIUM"}]}]}
{"id": "adeyosemanputra_pygoat_2", "reviews": []}
{"id": "adeyosemanputra_pygoat_4", "reviews": []}
{"id": "adeyosemanputra_pygoat_9", "reviews": []}
{"id": "adeyosemanputra_pygoat_10", "reviews": []}
{"id": "adeyosemanputra_pygoat_11", "reviews": [{"filename": "pygoat/introduction/views.py", "language": "python", "reviews": [{"issue_text": "Possible SQL injection vector through string-based query construction.", "line_number": 32, "cwe": 89, "severity": "MEDIUM", "confidence": "LOW"}]}]}
{"id": "adeyosemanputra_pygoat_12", "reviews": []}
{"id": "adeyosemanputra_pygoat_13", "reviews": [{"filename": "pygoat/introduction/views.py", "language": "python", "reviews": [{"issue_text": "Using parseString to parse untrusted XML data is known to be vulnerable to XML attacks. Replace parseString with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.", "line_number": 7, "cwe": 20, "severity": "LOW", "confidence": "HIGH"}, {"issue_text": "Using feature_external_ges to parse untrusted XML data is known to be vulnerable to XML attacks. Replace feature_external_ges with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.", "line_number": 8, "cwe": 20, "severity": "LOW", "confidence": "HIGH"}, {"issue_text": "Using make_parser to parse untrusted XML data is known to be vulnerable to XML attacks. Replace make_parser with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.", "line_number": 9, "cwe": 20, "severity": "LOW", "confidence": "HIGH"}, {"issue_text": "Using xml.sax.make_parser to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax.make_parser with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called", "line_number": 76, "cwe": 20, "severity": "MEDIUM", "confidence": "HIGH"}, {"issue_text": "Using xml.dom.pulldom.parseString to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.dom.pulldom.parseString with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called", "line_number": 78, "cwe": 20, "severity": "MEDIUM", "confidence": "HIGH"}, {"issue_text": "The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service.", "line_number": 7, "cwe": 611, "severity": "MEDIUM", "confidence": "LOW"}, {"issue_text": "The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service.", "line_number": 8, "cwe": 611, "severity": "MEDIUM", "confidence": "LOW"}, {"issue_text": "The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service.", "line_number": 9, "cwe": 611, "severity": "MEDIUM", "confidence": "LOW"}, {"issue_text": "Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.", "line_number": 65, "cwe": 352, "severity": "MEDIUM", "confidence": "LOW"}, {"issue_text": "Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.", "line_number": 74, "cwe": 352, "severity": "MEDIUM", "confidence": "LOW"}]}]}
{"id": "adeyosemanputra_pygoat_14", "reviews": [{"filename": "pygoat/introduction/views.py", "language": "python", "reviews": [{"issue_text": "Consider possible security implications associated with pickle module.", "line_number": 12, "cwe": 502, "severity": "LOW", "confidence": "HIGH"}, {"issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.", "line_number": 78, "cwe": 502, "severity": "MEDIUM", "confidence": "HIGH"}, {"issue_text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "line_number": 67, "cwe": 502, "severity": "MEDIUM", "confidence": "LOW"}, {"issue_text": "Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None.", "line_number": 75, "cwe": 614, "severity": "LOW", "confidence": "LOW"}]}]}
{"id": "adeyosemanputra_pygoat_16", "reviews": [{"filename": "pygoat/introduction/views.py", "language": "python", "reviews": [{"issue_text": "Consider possible security implications associated with the subprocess module.", "line_number": 7, "cwe": 78, "severity": "LOW", "confidence": "HIGH"}, {"issue_text": "subprocess call with shell=True identified, security issue.", "line_number": 161, "cwe": 78, "severity": "HIGH", "confidence": "HIGH"}, {"issue_text": "Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.", "line_number": 149, "cwe": 352, "severity": "MEDIUM", "confidence": "LOW"}]}]}
{"id": "adeyosemanputra_pygoat_17", "reviews": []}
{"id": "adeyosemanputra_pygoat_18", "reviews": [{"filename": "pygoat/introduction/views.py", "language": "python", "reviews": [{"issue_text": "Consider possible security implications associated with the subprocess module.", "line_number": 9, "cwe": 78, "severity": "LOW", "confidence": "HIGH"}, {"issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "line_number": 202, "cwe": 330, "severity": "LOW", "confidence": "HIGH"}, {"issue_text": "Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.", "line_number": 198, "cwe": 352, "severity": "MEDIUM", "confidence": "LOW"}, {"issue_text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.", "line_number": 221, "cwe": 79, "severity": "MEDIUM", "confidence": "MEDIUM"}]}]}
{"id": "adeyosemanputra_pygoat_19", "reviews": []}
{"id": "adeyosemanputra_pygoat_20", "reviews": []}
{"id": "adeyosemanputra_pygoat_21", "reviews": []}
{"id": "adeyosemanputra_pygoat_22", "reviews": []}
{"id": "adeyosemanputra_pygoat_23", "reviews": []}
{"id": "adeyosemanputra_pygoat_24", "reviews": []}
{"id": "adeyosemanputra_pygoat_25", "reviews": []}
{"id": "adeyosemanputra_pygoat_26", "reviews": []}
{"id": "adeyosemanputra_pygoat_27", "reviews": []}
{"id": "adeyosemanputra_pygoat_28", "reviews": []}
{"id": "adeyosemanputra_pygoat_29", "reviews": [{"filename": "pygoat/introduction/views.py", "language": "python", "reviews": [{"issue_text": "Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None.", "line_number": 194, "cwe": 614, "severity": "LOW", "confidence": "LOW"}, {"issue_text": "Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None.", "line_number": 208, "cwe": 614, "severity": "LOW", "confidence": "LOW"}, {"issue_text": "Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None.", "line_number": 222, "cwe": 614, "severity": "LOW", "confidence": "LOW"}]}]}
{"id": "adeyosemanputra_pygoat_30", "reviews": []}
{"id": "adeyosemanputra_pygoat_31", "reviews": []}
{"id": "adeyosemanputra_pygoat_32", "reviews": []}
{"id": "adeyosemanputra_pygoat_33", "reviews": []}
{"id": "adeyosemanputra_pygoat_34", "reviews": []}
{"id": "adeyosemanputra_pygoat_35", "reviews": []}
{"id": "adeyosemanputra_pygoat_36", "reviews": []}
{"id": "adeyosemanputra_pygoat_38", "reviews": [{"filename": "pygoat/introduction/views.py", "language": "python", "reviews": [{"issue_text": "Use of unsafe yaml load. Allows instantiation of arbitrary objects. Consider yaml.safe_load().", "line_number": 259, "cwe": 20, "severity": "MEDIUM", "confidence": "HIGH"}, {"issue_text": "Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.", "line_number": 251, "cwe": 352, "severity": "MEDIUM", "confidence": "LOW"}, {"issue_text": "Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.", "line_number": 259, "cwe": 502, "severity": "MEDIUM", "confidence": "MEDIUM"}]}]}
{"id": "adeyosemanputra_pygoat_39", "reviews": [{"filename": "pygoat/introduction/views.py", "language": "python", "reviews": [{"issue_text": "Use of unsafe yaml load. Allows instantiation of arbitrary objects. Consider yaml.safe_load().", "line_number": 260, "cwe": 20, "severity": "MEDIUM", "confidence": "HIGH"}, {"issue_text": "Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.", "line_number": 260, "cwe": 502, "severity": "MEDIUM", "confidence": "MEDIUM"}]}]}
{"id": "adeyosemanputra_pygoat_41", "reviews": []}
{"id": "adeyosemanputra_pygoat_42", "reviews": []}
{"id": "adeyosemanputra_pygoat_43", "reviews": [{"filename": "pygoat/introduction/views.py", "language": "python", "reviews": [{"issue_text": "Possible SQL injection vector through string-based query construction.", "line_number": 72, "cwe": 89, "severity": "MEDIUM", "confidence": "LOW"}, {"issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.", "line_number": 105, "cwe": 502, "severity": "MEDIUM", "confidence": "HIGH"}, {"issue_text": "subprocess call with shell=True identified, security issue.", "line_number": 224, "cwe": 78, "severity": "HIGH", "confidence": "HIGH"}, {"issue_text": "Use of unsafe yaml load. Allows instantiation of arbitrary objects. Consider yaml.safe_load().", "line_number": 309, "cwe": 20, "severity": "MEDIUM", "confidence": "HIGH"}, {"issue_text": "Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None.", "line_number": 102, "cwe": 614, "severity": "LOW", "confidence": "LOW"}, {"issue_text": "Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.", "line_number": 309, "cwe": 502, "severity": "MEDIUM", "confidence": "MEDIUM"}]}]}
{"id": "adeyosemanputra_pygoat_44", "reviews": []}
{"id": "adeyosemanputra_pygoat_45", "reviews": []}
{"id": "adeyosemanputra_pygoat_46", "reviews": []}
{"id": "adeyosemanputra_pygoat_47", "reviews": []}
{"id": "adeyosemanputra_pygoat_48", "reviews": []}
{"id": "adeyosemanputra_pygoat_49", "reviews": []}
{"id": "adeyosemanputra_pygoat_50", "reviews": []}
{"id": "adeyosemanputra_pygoat_51", "reviews": []}
{"id": "adeyosemanputra_pygoat_52", "reviews": []}
{"id": "adeyosemanputra_pygoat_53", "reviews": []}
{"id": "adeyosemanputra_pygoat_54", "reviews": []}
{"id": "adeyosemanputra_pygoat_55", "reviews": []}
{"id": "adeyosemanputra_pygoat_56", "reviews": []}
{"id": "adeyosemanputra_pygoat_57", "reviews": []}
{"id": "juice-shop_juice-shop_35", "reviews": []}
{"id": "juice-shop_juice-shop_36", "reviews": []}
{"id": "juice-shop_juice-shop_37", "reviews": []}
{"id": "juice-shop_juice-shop_38", "reviews": []}
{"id": "juice-shop_juice-shop_40", "reviews": [{"filename": "middleware.js", "language": "javascript", "reviews": [{"issue_text": "It looks like 'to' is read from user input and it is used to as a redirect. Ensure 'to' is not externally controlled, otherwise this is an open redirect.", "line_number": 85, "cwe": 601, "severity": "LOW", "confidence": "LOW"}, {"issue_text": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.", "line_number": 165, "cwe": 79, "severity": "MEDIUM", "confidence": "MEDIUM"}, {"issue_text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "line_number": 182, "cwe": 89, "severity": "HIGH", "confidence": "HIGH"}, {"issue_text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "line_number": 241, "cwe": 89, "severity": "HIGH", "confidence": "HIGH"}, {"issue_text": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.", "line_number": 279, "cwe": 73, "severity": "MEDIUM", "confidence": "MEDIUM"}]}]}
{"id": "juice-shop_juice-shop_41", "reviews": []}
{"id": "juice-shop_juice-shop_42", "reviews": []}
{"id": "juice-shop_juice-shop_43", "reviews": [{"filename": "routes/shop.js", "language": "javascript", "reviews": [{"issue_text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "line_number": 18, "cwe": 89, "severity": "HIGH", "confidence": "HIGH"}, {"issue_text": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.", "line_number": 105, "cwe": 79, "severity": "MEDIUM", "confidence": "MEDIUM"}]}, {"filename": "routes/site.js", "language": "javascript", "reviews": [{"issue_text": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.", "line_number": 36, "cwe": 73, "severity": "MEDIUM", "confidence": "MEDIUM"}, {"issue_text": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination", "line_number": 36, "cwe": 22, "severity": "MEDIUM", "confidence": "MEDIUM"}, {"issue_text": "It looks like 'to' is read from user input and it is used to as a redirect. Ensure 'to' is not externally controlled, otherwise this is an open redirect.", "line_number": 61, "cwe": 601, "severity": "LOW", "confidence": "LOW"}]}, {"filename": "routes/user.js", "language": "javascript", "reviews": [{"issue_text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "line_number": 15, "cwe": 89, "severity": "HIGH", "confidence": "HIGH"}]}]}
{"id": "juice-shop_juice-shop_44", "reviews": []}
{"id": "juice-shop_juice-shop_45", "reviews": []}
{"id": "juice-shop_juice-shop_46", "reviews": []}
{"id": "juice-shop_juice-shop_47", "reviews": []}
{"id": "juice-shop_juice-shop_48", "reviews": []}
{"id": "juice-shop_juice-shop_50", "reviews": []}
{"id": "juice-shop_juice-shop_51", "reviews": []}
{"id": "juice-shop_juice-shop_56", "reviews": []}
{"id": "juice-shop_juice-shop_57", "reviews": []}
{"id": "juice-shop_juice-shop_63", "reviews": []}
{"id": "juice-shop_juice-shop_67", "reviews": []}
{"id": "juice-shop_juice-shop_68", "reviews": []}
{"id": "juice-shop_juice-shop_70", "reviews": []}
{"id": "juice-shop_juice-shop_73", "reviews": []}
{"id": "juice-shop_juice-shop_75", "reviews": []}
{"id": "juice-shop_juice-shop_79", "reviews": []}
{"id": "juice-shop_juice-shop_83", "reviews": []}
{"id": "juice-shop_juice-shop_84", "reviews": []}
{"id": "juice-shop_juice-shop_85", "reviews": []}
{"id": "juice-shop_juice-shop_87", "reviews": []}
{"id": "juice-shop_juice-shop_88", "reviews": []}
{"id": "juice-shop_juice-shop_89", "reviews": []}
{"id": "juice-shop_juice-shop_91", "reviews": []}
{"id": "juice-shop_juice-shop_92", "reviews": []}
{"id": "juice-shop_juice-shop_94", "reviews": []}
{"id": "juice-shop_juice-shop_95", "reviews": []}
{"id": "juice-shop_juice-shop_96", "reviews": []}
{"id": "juice-shop_juice-shop_99", "reviews": []}
{"id": "juice-shop_juice-shop_100", "reviews": []}
{"id": "juice-shop_juice-shop_101", "reviews": []}
{"id": "juice-shop_juice-shop_107", "reviews": []}
{"id": "juice-shop_juice-shop_108", "reviews": []}
{"id": "juice-shop_juice-shop_109", "reviews": []}
{"id": "juice-shop_juice-shop_110", "reviews": []}
{"id": "juice-shop_juice-shop_111", "reviews": []}
{"id": "juice-shop_juice-shop_113", "reviews": []}
{"id": "juice-shop_juice-shop_114", "reviews": [{"filename": "routes/shop.js", "language": "javascript", "reviews": [{"issue_text": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.", "line_number": 142, "cwe": 79, "severity": "MEDIUM", "confidence": "MEDIUM"}]}, {"filename": "server.js", "language": "javascript", "reviews": [{"issue_text": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.", "line_number": 51, "cwe": 548, "severity": "MEDIUM", "confidence": "MEDIUM"}]}]}
{"id": "juice-shop_juice-shop_118", "reviews": [{"filename": "routes/fileServer.js", "language": "javascript", "reviews": [{"issue_text": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.", "line_number": 21, "cwe": 73, "severity": "MEDIUM", "confidence": "MEDIUM"}, {"issue_text": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination", "line_number": 21, "cwe": 22, "severity": "MEDIUM", "confidence": "MEDIUM"}]}, {"filename": "routes/login.js", "language": "javascript", "reviews": [{"issue_text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "line_number": 14, "cwe": 89, "severity": "HIGH", "confidence": "HIGH"}]}, {"filename": "routes/order.js", "language": "javascript", "reviews": [{"issue_text": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.", "line_number": 63, "cwe": 79, "severity": "MEDIUM", "confidence": "MEDIUM"}]}, {"filename": "routes/redirect.js", "language": "javascript", "reviews": [{"issue_text": "It looks like 'toUrl' is read from user input and it is used to as a redirect. Ensure 'toUrl' is not externally controlled, otherwise this is an open redirect.", "line_number": 15, "cwe": 601, "severity": "LOW", "confidence": "LOW"}]}, {"filename": "routes/search.js", "language": "javascript", "reviews": [{"issue_text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "line_number": 14, "cwe": 89, "severity": "HIGH", "confidence": "HIGH"}]}]}
{"id": "juice-shop_juice-shop_119", "reviews": []}
{"id": "juice-shop_juice-shop_121", "reviews": []}
{"id": "juice-shop_juice-shop_122", "reviews": []}
